<launch>

  <arg name="package_name" value="asv_perception_obstacleid"/>
  <arg name="namespace_name" value="camera0"/>
  
  <group ns="$(arg namespace_name)">

    <arg name="nodelet_name" value="$(arg package_name)_nodelet" />
    <node pkg="nodelet" type="nodelet" name="$(arg nodelet_name)" args="manager" respawn="true" />

    <!-- 
      camera classified extraction, unclassified projection
      See ObstacleProjectionNodelet.h
    -->
    <node pkg="nodelet" type="nodelet" name="projection" respawn="true" output="screen"
      args="load $(arg package_name)/ObstacleProjectionNodelet $(arg nodelet_name)" >

      <remap from="~segmentation" to="/segmentation/0/obstacles" />
      <remap from="~classification" to="/classification/0/output" />
      <remap from="~rgb_radar" to="/camera0/homography/rgb_radar" />

      <rosparam>
        min_height: 1.
        max_height: 2.
        min_depth: 1.
        max_depth: 2.
        max_distance: 500.
        resolution: 0.5
        roi_grow_limit: 0.5
        roi_shrink_limit: 0.5
      </rosparam>
    </node>

    <!-- minimum distance filter -->
    <!-- 
    <node pkg="nodelet" type="nodelet" name="distance_filter" respawn="true" output="screen"
      args="load $(arg package_name)/PointCloudFilterNodelet $(arg nodelet_name)" >
    >
      <remap from="~input" to="projection/cloud" />
      <rosparam>
        min_distance_x: 6.
        min_distance_y: 5.
      </rosparam>
    </node>
    -->

    <!-- voxel grid, z filter, transform points to fixed frame -->
    <!--
    <node pkg="nodelet" type="nodelet" name="pc_filter" args="load pcl/VoxelGrid $(arg nodelet_name)" output="screen">
      <remap from="~input" to="distance_filter/output" />
      <rosparam>
        filter_field_name: z
        filter_limit_min: -0.0
        filter_limit_max: 2.0
        filter_limit_negative: False
        leaf_size: 0.5
        output_frame:  'odom'
      </rosparam>
    </node>
    -->
    <!-- cluster extraction to obstacles -->
    <!--
    <node pkg="nodelet" type="nodelet" name="extraction" respawn="true" output="screen"
      args="load $(arg package_name)/ObstacleExtractionNodelet $(arg nodelet_name)" >

      <remap from="~input" to="pc_filter/output" />
      
      <rosparam>
        cluster_tolerance: 4.
        min_cluster_size: 75
      </rosparam>
    </node>
    -->
  </group>

</launch>
