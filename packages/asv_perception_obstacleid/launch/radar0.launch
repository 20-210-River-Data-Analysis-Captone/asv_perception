<launch>

  <arg name="package_name" value="asv_perception_obstacleid"/>
  <arg name="namespace_name" value="radar0"/>
  
  <group ns="$(arg namespace_name)">

    <arg name="nodelet_name" value="$(arg package_name)_nodelet" />
    <node pkg="nodelet" type="nodelet" name="$(arg nodelet_name)" args="manager" respawn="true" />

    <!-- radius outlier, radar1 radius filter -->
    <node pkg="nodelet" type="nodelet" name="outlier_filter" respawn="true" output="screen"
      args="load $(arg package_name)/PointCloudFilterNodelet $(arg nodelet_name)" >
    >
      <remap from="~input" to="/broadband_radar/channel_0/pointcloud" />

      <rosparam>
        min_distance: 130.
        outlier_radius:  2.
        outlier_min_neighbors: 10
      </rosparam>
    </node>

    <!-- voxel grid, transform points to fixed frame -->
    <node pkg="nodelet" type="nodelet" name="grid_filter" args="load pcl/VoxelGrid $(arg nodelet_name)" output="screen">
      <remap from="~input" to="outlier_filter/output" /> <!-- remap from=sink to=source -->
      <rosparam>
        leaf_size: 0.1
        output_frame:  'odom'
      </rosparam>
    </node>

    <!-- 
      pointcloud concat for radar segments
    -->
    <node pkg="nodelet" type="nodelet" name="concat" output="screen"
      args="load $(arg package_name)/PointCloudConcatNodelet $(arg nodelet_name)" >

      <remap from="~input" to="grid_filter/output" />

      <rosparam>
        segments: 10
      </rosparam>
    </node>

    <!-- cluster extraction to obstacles -->
    <node pkg="nodelet" type="nodelet" name="extraction" respawn="true" output="screen"
      args="load $(arg package_name)/ObstacleExtractionNodelet $(arg nodelet_name)" >

      <remap from="~input" to="concat/full" />
      
      <rosparam>
        cluster_tolerance: 2.
        min_cluster_size: 50
        max_cluster_size: 5000
      </rosparam>
    </node>

  </group>

</launch>
