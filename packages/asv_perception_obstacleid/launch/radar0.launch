<launch>

  <arg name="package_name" value="asv_perception_obstacleid"/>
  <arg name="namespace_name" value="radar0"/>
  
  <group ns="$(arg namespace_name)">

    <arg name="nodelet_name" value="$(arg package_name)_nodelet" />
    <node pkg="nodelet" type="nodelet" name="$(arg nodelet_name)" args="manager" respawn="true" />

    <!-- self-return filter -->
    <node pkg="nodelet" type="nodelet" name="outlier_filter" respawn="true" output="screen"
      args="load $(arg package_name)/PointCloudFilterNodelet $(arg nodelet_name)" >
    
      <remap from="~input" to="/broadband_radar/channel_0/pointcloud" />

      <rosparam>
        min_distance: 6.
      </rosparam>
    </node>

    <!-- voxel grid, transform points to fixed frame -->
    <node pkg="nodelet" type="nodelet" name="grid_filter" args="load pcl/VoxelGrid $(arg nodelet_name)" output="screen">
      <remap from="~input" to="outlier_filter/output" /> <!-- remap from=sink to=source -->
      <rosparam>
        leaf_size: 0.1
        output_frame:  'odom'
      </rosparam>
    </node>

    <!-- 
      pointcloud concat for radar segments
    -->
    <node pkg="nodelet" type="nodelet" name="concat" output="screen"
      args="load $(arg package_name)/PointCloudConcatNodelet $(arg nodelet_name)" >

      <remap from="~input" to="grid_filter/output" />

      <rosparam>
        decay_time: 1.5
      </rosparam>
    </node>

    <!-- cluster density filter -->
    <node pkg="nodelet" type="nodelet" name="cluster_filter" respawn="true" output="screen"
      args="load $(arg package_name)/PointCloudFilterNodelet $(arg nodelet_name)" >
    
      <remap from="~input" to="concat/full" />

      <rosparam>
        outlier_radius:  2.
        outlier_min_neighbors: 15

        <!-- 
          land mass filter
            exclude points which can be clustered into areas larger than cluster_area_max 
        -->
        cluster_inliers: true
        cluster_tolerance: 8.
        cluster_size_min: 3
        cluster_area_max:  3000
      </rosparam>
    </node>

    <!-- cluster extraction to obstacles -->
    <node pkg="nodelet" type="nodelet" name="extraction" respawn="true" output="screen"
      args="load $(arg package_name)/ObstacleExtractionNodelet $(arg nodelet_name)" >

      <remap from="~input" to="cluster_filter/output" />
      
      <rosparam>
        cluster_tolerance: 2.
        cluster_size_min: 100
        cluster_size_max: 10000
        cluster_area_max: 500
      </rosparam>
    </node>

  </group>

</launch>
