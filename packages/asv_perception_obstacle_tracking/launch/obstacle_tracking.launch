<?xml version="1.0" encoding="utf-8"?>
<launch>
    <arg name="pkg_name" value="asv_perception_obstacle_tracking"/>
    <arg name="ns_name" default="obstacles"/>

    <group ns="$(arg ns_name)">

        <!-- 
            classified obstacle tracking
        -->
        <node name="tracking_classified" pkg="$(arg pkg_name)" type="tracking.py" output="screen">
            
            <remap from="~input" to="/left_camera/projection/obstacles" />

            <rosparam>
                max_age: 4
                min_hits: 3
                tf_frame: 'odom'
            </rosparam>
        </node>

        <!-- 
            unclassified obstacle tracking
        -->
        <node name="tracking_unclassified" pkg="$(arg pkg_name)" type="tracking.py" output="screen">
            
            <remap from="~input" to="/left_camera/extraction/obstacles" />

            <rosparam>
                max_age: 6
                min_hits: 4
                tf_frame: 'odom'
            </rosparam>
        </node>

        <!-- combine obstacles from multiple sources into a single ObstacleArray -->
        <node name="mux" pkg="$(arg pkg_name)" type="mux_obstacles.py" output="screen">

            <remap from="~input0" to="tracking_unclassified/obstacles" />
            <remap from="~input1" to="tracking_classified/obstacles" />

            <rosparam>
                max_subs: 2
            </rosparam>
        </node>

        <!-- 
            tracked obstacle visualization
        -->
        <node name="visualization" pkg="$(arg pkg_name)" type="visualization.py" output="screen">

            <remap from="~input" to="mux/obstacles" />

            <rosparam>
                marker_duration_secs: 0.5
            </rosparam>
        </node>

        <!-- 
            NMEA reporting node
        -->
        <node name="nmea_reporting" pkg="$(arg pkg_name)" type="nmea_reporting.py" output="screen">

            <remap from="~input" to="mux/obstacles" />
            
            <rosparam>
                convex_hull: True
                tf_frame: 'base_link'
            </rosparam>
        </node>

    </group>
</launch>

